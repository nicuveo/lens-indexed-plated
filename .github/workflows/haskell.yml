name: Haskell CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: haskell/actions/setup@v2
      id: setup
      with:
        ghc-version: '9.2.7'
        cabal-version: 'latest'
        cabal-update: true

    - name: Configure the build
      run: |
        cabal configure --enable-tests --enable-benchmarks --disable-documentation
        cabal build --dry-run
      # This last step generates dist-newstyle/cache/plan.json for the cache key.

    - name: Restore cached dependencies
      uses: actions/cache/restore@v3
      id: cache
      env:
        key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
        restore-keys: ${{ env.key }}-

    - name: Install dependencies
      run: cabal build all --only-dependencies

    # Cache dependencies at this point, so that we do not have to rebuild them should the subsequent steps fail.
    - name: Save cached dependencies
      uses: actions/cache/save@v3
      # Caches are immutable, trying to save with the same key would error.
      if: ${{ steps.cache.outputs.cache-primary-key != steps.cache.outputs.cache-matched-key }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ steps.cache.outputs.cache-primary-key }}

    - name: Build
      run: cabal build all

    # - name: Run tests
    #   run: cabal test all

    - name: Check cabal file
      run: cabal check

    - name: Build documentation
      run: cabal haddock all

  hlint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: 'Set up hlint'
      uses: haskell/actions/hlint-setup@v2

    - name: 'Run hlint'
      uses: haskell/actions/hlint-run@v2
      with:
        path: src/
        fail-on: warning

  format:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: 'Run stylish-haskell'
      run: |
        curl -sL https://raw.github.com/haskell/stylish-haskell/master/scripts/latest.sh | sh -s -ri src
        test -z "$( git status --porcelain src )" || echo "::error ::all files must be formatted with stylish-haskell"
